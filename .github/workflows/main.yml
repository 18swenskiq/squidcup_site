on: [push]
defaults:
  run:
    working-directory: ./cdk
jobs:
  aws_cdk:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: './cdk/package-lock.json'

      - name: Install AWS CDK
        run: npm i -g aws-cdk

      - name: Install CDK dependencies
        run: npm install

      - name: Build Local Lambda Projects
        run: |
          for dir in ./src/*/; do
            if [ -d "$dir" ]; then
              echo "Building Lambda in $dir"
              (cd "$dir" && npm install && npm run build)
            fi
          done

      - name: Configure AWS credentials for us-east-2
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: 'us-east-2'

      # Bootstrap only the API stack first
      - name: Bootstrap API stack
        run: cdk bootstrap --context stackId=ApiStack

      # Synthesize API stack only
      - name: Synthesize API stack
        run: cdk synth SquidCupSite-ApiStack

      # Deploy API stack first
      - name: Deploy API stack
        run: cdk deploy SquidCupSite-ApiStack --require-approval never

      - name: Extract API Gateway URL
        id: get_api_url
        run: |
          API_URL=$(aws cloudformation describe-stacks --stack-name SquidCupSite-ApiStack --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue" --output text)
          echo "API_URL=$API_URL" >> $GITHUB_ENV
          echo "Retrieved API URL: $API_URL"

      - name: Update environment.prod.ts
        run: |
          mkdir -p ../frontend/src/environments
          echo "export const environment = {" > ../frontend/src/environments/environment.prod.ts
          echo "  production: true," >> ../frontend/src/environments/environment.prod.ts
          echo "  apiUrl: '${API_URL}'" >> ../frontend/src/environments/environment.prod.ts
          echo "};" >> ../frontend/src/environments/environment.prod.ts
          cat ../frontend/src/environments/environment.prod.ts

      - name: Build Frontend
        working-directory: ./frontend
        run: |
          npm install
          npm run ng build -- --configuration production
          
      - name: Copy Frontend Build to CDK Assets
        run: |
          mkdir -p ./assets
          cp -r ../frontend/dist/spkymnr-xyz/browser ./assets/
      
      - name: Configure AWS credentials for us-east-1
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: 'us-east-1'

      # Bootstrap certificate stack in us-east-1
      - name: Bootstrap Certificate stack
        run: |
          cdk bootstrap aws://$(aws sts get-caller-identity --query 'Account' --output text)/us-east-1

      - name: Deploy Certificate Stack
        run: |
          cdk deploy SquidCupSite-CertificateStack --require-approval never
          # Export the ARN and ensure it's captured
          CERT_ARN=$(aws cloudformation describe-stacks --stack-name SquidCupSite-CertificateStack --query "Stacks[0].Outputs[?OutputKey=='CertificateArn'].OutputValue" --output text)
          echo "Certificate ARN: $CERT_ARN"
          echo "CERT_ARN=$CERT_ARN" >> "$GITHUB_ENV"

      - name: Configure AWS credentials back to us-east-2
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: 'us-east-2'

      # Debug step to verify environment variables
      - name: Debug Environment
        run: |
          echo "Certificate ARN: $CERT_ARN"
          echo "API URL: $API_URL"

      # Cancel any in-progress updates and destroy stack
      #- name: Handle Frontend Stack
      #  run: |
      #    # Try to cancel any in-progress updates
      #    aws cloudformation cancel-update-stack --stack-name SquidCupSite-FrontendStack || true
      #    
      #    # Wait briefly for cancellation
      #    sleep 30
      #    
      #    # Now try to delete the stack
      #    aws cloudformation delete-stack --stack-name SquidCupSite-FrontendStack || true
      #    
      #    # Wait for deletion to complete
      #    aws cloudformation wait stack-delete-complete --stack-name SquidCupSite-FrontendStack || true
          
      # Deploy fresh frontend stack
      - name: Deploy Frontend Stack
        if: env.CERT_ARN != ''
        run: |
          # Store certificate ARN in SSM parameter store
          aws ssm put-parameter \
            --name "/squidcup/certificate-arn" \
            --value "$CERT_ARN" \
            --type String \
            --overwrite
            
          cdk deploy SquidCupSite-FrontendStack \
            --require-approval never