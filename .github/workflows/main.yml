on:
  push:
    branches:
      - main
defaults:
  run:
    working-directory: ./cdk
jobs:
  aws_cdk:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: './cdk/package-lock.json'

      - name: Install AWS CDK
        run: npm i -g aws-cdk

      - name: Install CDK dependencies
        run: npm install

      - name: Build Shared Packages
        run: |
          echo "Building types-squidcup package..."
          (cd ../packages/types-squidcup && npm install && npm run build)
          
          echo "Building shared-lambda-utils package..."
          (cd ../packages/shared-lambda-utils && npm install && npm run build)

      - name: Pack Shared Packages
        run: |
          echo "Packing types-squidcup package..."
          (cd ../packages/types-squidcup && npm pack)
          echo "Packing shared-lambda-utils package..."
          (cd ../packages/shared-lambda-utils && npm pack)
          echo "Capturing tarball absolute paths..."
          TYPES_TARBALL=$(realpath ../packages/types-squidcup/*.tgz)
          UTILS_TARBALL=$(realpath ../packages/shared-lambda-utils/*.tgz)
          echo "TYPES_TARBALL=$TYPES_TARBALL" >> $GITHUB_ENV
          echo "UTILS_TARBALL=$UTILS_TARBALL" >> $GITHUB_ENV

      - name: Update Shared-Lambda-Utils Dependencies
        run: |
          echo "Updating shared-lambda-utils to reference types tarball..."
          sed -i.bak "s|file:../types-squidcup|file:${{ env.TYPES_TARBALL }}|" ../packages/shared-lambda-utils/package.json

      - name: Install Types in Shared-Lambda-Utils
        run: |
          echo "Installing types tarball in shared-lambda-utils..."
          (cd ../packages/shared-lambda-utils && npm install ${{ env.TYPES_TARBALL }})

      - name: Verify TypeScript Configuration in Shared-Lambda-Utils
        run: |
          echo "Ensuring TypeScript resolves types correctly in shared-lambda-utils..."
          (cd ../packages/shared-lambda-utils && \
            jq '.compilerOptions.baseUrl = "./" | .compilerOptions.paths["@squidcup/types"] = ["node_modules/@squidcup/types"]' tsconfig.json > tsconfig.tmp.json && \
            mv tsconfig.tmp.json tsconfig.json)

      - name: Rebuild Shared-Lambda-Utils
        run: |
          echo "Rebuilding shared-lambda-utils package with updated TypeScript configuration..."
          (cd ../packages/shared-lambda-utils && npm run clean && npm install && npm run build)

      - name: Repack Updated Shared-Lambda-Utils
        run: |
          echo "Repacking shared-lambda-utils with the types included..."
          (cd ../packages/shared-lambda-utils && npm pack)
          echo "Updating UTILS_TARBALL path..."
          UTILS_TARBALL=$(realpath ../packages/shared-lambda-utils/*.tgz)
          echo "UTILS_TARBALL=$UTILS_TARBALL" >> $GITHUB_ENV

      - name: Copy Tarballs to CDK Directory
        run: |
          echo "Copying tarballs to CDK directory for Docker bundling..."
          # Create tarballs directory if it doesn't exist
          mkdir -p ./tarballs
          cp ${{ env.TYPES_TARBALL }} ./tarballs/
          cp ${{ env.UTILS_TARBALL }} ./tarballs/
          # Update environment variables to use relative paths from Lambda directories
          TYPES_TARBALL_NAME=$(basename ${{ env.TYPES_TARBALL }})
          UTILS_TARBALL_NAME=$(basename ${{ env.UTILS_TARBALL }})
          echo "TYPES_TARBALL_REL=../../tarballs/$TYPES_TARBALL_NAME" >> $GITHUB_ENV
          echo "UTILS_TARBALL_REL=../../tarballs/$UTILS_TARBALL_NAME" >> $GITHUB_ENV

      - name: Update Lambda Dependencies and Install Packages
        run: |
          for dir in ./src/*/; do
            if [ -d "$dir" ]; then
              echo "Updating dependencies for Lambda in $dir"
              (cd "$dir" && \
                # Clean any previous installs
                rm -rf node_modules package-lock.json && \
                # Add @squidcup/types as a dependency if it doesn't exist, using the correct tarball path
                if ! grep -q '"@squidcup/types"' package.json; then
                  jq --arg tarball_path "file:${{ env.TYPES_TARBALL_REL }}" '.dependencies["@squidcup/types"] = $tarball_path' package.json > package.tmp.json && mv package.tmp.json package.json
                fi && \
                echo "Before replacement:" && cat package.json | grep -E "(types|shared-lambda-utils)" && \
                # Update package.json to use relative tarball paths
                sed -i.bak "s|file:../../../packages/types-squidcup|file:${{ env.TYPES_TARBALL_REL }}|g" package.json && \
                sed -i.bak "s|file:../../../packages/shared-lambda-utils|file:${{ env.UTILS_TARBALL_REL }}|g" package.json && \
                echo "After replacement:" && cat package.json | grep -E "(types|shared-lambda-utils)" && \
                # Verify the tarball files exist before installing
                echo "Checking if tarball files exist:" && \
                ls -la ../../tarballs/ && \
                # Install packages so CDK can resolve dependencies
                npm install)
            fi
          done

      - name: Configure AWS credentials for us-east-1
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: 'us-east-1'

      # Bootstrap all stacks in us-east-1
      - name: Bootstrap CDK
        run: |
          # Bootstrap specifically for us-east-1
          cdk bootstrap aws://$(aws sts get-caller-identity --query 'Account' --output text)/us-east-1

      # Synthesize API stack only
      - name: Synthesize CDK
        run: cdk synth SquidCupSite-ApiStack

      # Deploy API stack first
      - name: Deploy API stack
        run: cdk deploy SquidCupSite-ApiStack --require-approval never

      - name: Build Local Lambda Projects
        run: |
          for dir in ./src/*/; do
            if [ -d "$dir" ]; then
              echo "Building Lambda in $dir"
              (cd "$dir" && npm install && npm run build)
            fi
          done

      - name: Extract API Gateway URL
        id: get_api_url
        run: |
          API_URL=$(aws cloudformation describe-stacks --stack-name SquidCupSite-ApiStack --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue" --output text)
          echo "API_URL=$API_URL" >> $GITHUB_ENV
          echo "Retrieved API URL: $API_URL"

      - name: Update environment.prod.ts
        run: |
          mkdir -p ../frontend/src/environments
          echo "export const environment = {" > ../frontend/src/environments/environment.prod.ts
          echo "  production: true," >> ../frontend/src/environments/environment.prod.ts
          echo "  apiUrl: '${API_URL}'" >> ../frontend/src/environments/environment.prod.ts
          echo "};" >> ../frontend/src/environments/environment.prod.ts
          cat ../frontend/src/environments/environment.prod.ts

      - name: Build Frontend
        working-directory: ./frontend
        run: |
          npm install
          npx ng build --configuration ci
          
      - name: Copy Frontend Build to CDK Assets
        run: |
          mkdir -p ./assets
          cp -r ../frontend/dist/spkymnr-xyz/browser ./assets/

      # Deploy Certificate Stack (now in us-east-1 with everything else)
      - name: Deploy Certificate Stack
        timeout-minutes: 20
        run: |
          # Check if the certificate stack already exists and is complete
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name SquidCupSite-CertificateStack --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "DOES_NOT_EXIST")
          
          echo "Current stack status: $STACK_STATUS"
          
          if [ "$STACK_STATUS" = "CREATE_COMPLETE" ] || [ "$STACK_STATUS" = "UPDATE_COMPLETE" ]; then
            echo "Certificate stack already exists and is complete. Retrieving certificate ARN..."
            CERT_ARN=$(aws cloudformation describe-stacks --stack-name SquidCupSite-CertificateStack --query "Stacks[0].Outputs[?OutputKey=='CertificateArn'].OutputValue" --output text)
            echo "Certificate ARN: $CERT_ARN"
            echo "CERT_ARN=$CERT_ARN" >> "$GITHUB_ENV"
            exit 0
          elif [ "$STACK_STATUS" = "CREATE_IN_PROGRESS" ] || [ "$STACK_STATUS" = "UPDATE_IN_PROGRESS" ]; then
            echo "Certificate stack is currently in progress. Monitoring for completion..."
            
            # Monitor the existing stack instead of starting a new deployment
            WAIT_TIME=0
            MAX_WAIT=1200  # 20 minutes max for in-progress stack
            
            while [ $WAIT_TIME -lt $MAX_WAIT ]; do
              CURRENT_STATUS=$(aws cloudformation describe-stacks --stack-name SquidCupSite-CertificateStack --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "UNKNOWN")
              echo "Stack status: $CURRENT_STATUS (waited ${WAIT_TIME}s)"
              
              if [ "$CURRENT_STATUS" = "CREATE_COMPLETE" ] || [ "$CURRENT_STATUS" = "UPDATE_COMPLETE" ]; then
                echo "Certificate stack completed successfully!"
                CERT_ARN=$(aws cloudformation describe-stacks --stack-name SquidCupSite-CertificateStack --query "Stacks[0].Outputs[?OutputKey=='CertificateArn'].OutputValue" --output text)
                echo "Certificate ARN: $CERT_ARN"
                echo "CERT_ARN=$CERT_ARN" >> "$GITHUB_ENV"
                exit 0
              elif [ "$CURRENT_STATUS" = "CREATE_FAILED" ] || [ "$CURRENT_STATUS" = "ROLLBACK_COMPLETE" ] || [ "$CURRENT_STATUS" = "UPDATE_FAILED" ] || [ "$CURRENT_STATUS" = "UPDATE_ROLLBACK_COMPLETE" ]; then
                echo "Certificate stack deployment failed with status: $CURRENT_STATUS"
                exit 1
              fi
              
              sleep 30
              WAIT_TIME=$((WAIT_TIME + 30))
            done
            
            echo "Timeout waiting for in-progress stack to complete"
            exit 1
          elif [ "$STACK_STATUS" = "CREATE_FAILED" ] || [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Certificate stack is in failed state: $STACK_STATUS. Deleting and recreating..."
            aws cloudformation delete-stack --stack-name SquidCupSite-CertificateStack
            aws cloudformation wait stack-delete-complete --stack-name SquidCupSite-CertificateStack
            echo "Stack deleted. Proceeding with new deployment..."
          fi
          
          echo "Certificate stack needs to be created. Starting deployment..."
          
          # Start certificate deployment in background and capture output
          cdk deploy SquidCupSite-CertificateStack --require-approval never > cert_deploy.log 2>&1 &
          CDK_PID=$!
          
          echo "Certificate deployment started with PID: $CDK_PID"
          
          # Monitor the log file for DNS validation details
          VALIDATION_FOUND=false
          TIMEOUT=600 # 10 minutes timeout for finding validation record
          ELAPSED=0
          
          while [ $ELAPSED -lt $TIMEOUT ] && [ "$VALIDATION_FOUND" = "false" ]; do
            if [ -f cert_deploy.log ]; then
              # Check if deployment completed without needing validation (stack already existed)
              if grep -q "no changes" cert_deploy.log; then
                echo "Stack deployment completed with no changes"
                wait $CDK_PID
                CERT_ARN=$(aws cloudformation describe-stacks --stack-name SquidCupSite-CertificateStack --query "Stacks[0].Outputs[?OutputKey=='CertificateArn'].OutputValue" --output text)
                echo "Certificate ARN: $CERT_ARN"
                echo "CERT_ARN=$CERT_ARN" >> "$GITHUB_ENV"
                exit 0
              fi
              
              if grep -q "Content of DNS Record is:" cert_deploy.log; then
                DNS_RECORD=$(grep "Content of DNS Record is:" cert_deploy.log | tail -1)
                echo "Found DNS validation record: $DNS_RECORD"
                
                # Extract the validation record name and value
                VALIDATION_NAME=$(echo "$DNS_RECORD" | sed -n 's/.*Name: \([^,]*\),.*/\1/p')
                VALIDATION_VALUE=$(echo "$DNS_RECORD" | sed -n 's/.*Value: \([^}]*\)}.*/\1/p')
                
                echo "Validation Name: $VALIDATION_NAME"
                echo "Validation Value: $VALIDATION_VALUE"
                
                if [ -n "$VALIDATION_NAME" ] && [ -n "$VALIDATION_VALUE" ]; then
                  echo "VALIDATION_NAME=$VALIDATION_NAME" >> "$GITHUB_ENV"
                  echo "VALIDATION_VALUE=$VALIDATION_VALUE" >> "$GITHUB_ENV"
                  VALIDATION_FOUND=true
                  break
                fi
              fi
            fi
            
            sleep 5
            ELAPSED=$((ELAPSED + 5))
            echo "Waiting for DNS validation record... ($ELAPSED/$TIMEOUT seconds)"
          done
          
          if [ "$VALIDATION_FOUND" = "false" ]; then
            echo "Timeout waiting for DNS validation record"
            kill $CDK_PID 2>/dev/null || true
            cat cert_deploy.log
            exit 1
          fi
          
          echo "DNS validation record found, keeping CDK process running for now..."

      # Create DNS validation record in Cloudflare
      - name: Create Cloudflare DNS Record for Certificate Validation
        if: env.VALIDATION_NAME != '' && env.VALIDATION_VALUE != ''
        run: |
          # Get the zone ID for spkymnr.xyz
          ZONE_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=spkymnr.xyz" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" | \
            jq -r '.result[0].id')
          
          echo "Zone ID: $ZONE_ID"
          
          if [ "$ZONE_ID" = "null" ] || [ -z "$ZONE_ID" ]; then
            echo "Failed to get Cloudflare zone ID for spkymnr.xyz"
            exit 1
          fi
          
          # Extract just the subdomain part (remove the main domain)
          RECORD_NAME=$(echo "$VALIDATION_NAME" | sed 's/\.spkymnr\.xyz\.$//')
          
          echo "Creating DNS record: $RECORD_NAME with value: $VALIDATION_VALUE"
          
          # Create the CNAME record
          RECORD_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data "{
              \"type\": \"CNAME\",
              \"name\": \"$RECORD_NAME\",
              \"content\": \"$VALIDATION_VALUE\",
              \"ttl\": 120
            }")
          
          echo "Cloudflare API response: $RECORD_RESPONSE"
          
          # Check if record creation was successful
          SUCCESS=$(echo "$RECORD_RESPONSE" | jq -r '.success')
          if [ "$SUCCESS" = "true" ]; then
            RECORD_ID=$(echo "$RECORD_RESPONSE" | jq -r '.result.id')
            echo "DNS record created successfully with ID: $RECORD_ID"
            echo "CLOUDFLARE_RECORD_ID=$RECORD_ID" >> "$GITHUB_ENV"
          else
            echo "Failed to create DNS record"
            echo "$RECORD_RESPONSE" | jq -r '.errors[]'
            exit 1
          fi

      # Wait for DNS propagation and complete certificate validation
      - name: Complete Certificate Validation
        if: env.CLOUDFLARE_RECORD_ID != ''
        run: |
          echo "Waiting for DNS propagation..."
          sleep 120  # Wait 2 minutes for DNS propagation
          
          echo "DNS should be propagated, waiting for certificate validation to complete..."
          
          # Wait for the original CDK process to complete (or timeout)
          WAIT_TIME=0
          MAX_WAIT=900  # 15 minutes max
          
          while [ $WAIT_TIME -lt $MAX_WAIT ]; do
            # Check if the CloudFormation stack is complete
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name SquidCupSite-CertificateStack --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "UNKNOWN")
            
            echo "Stack status: $STACK_STATUS (waited ${WAIT_TIME}s)"
            
            if [ "$STACK_STATUS" = "CREATE_COMPLETE" ]; then
              echo "Certificate stack deployment completed successfully!"
              break
            elif [ "$STACK_STATUS" = "CREATE_FAILED" ] || [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
              echo "Certificate stack deployment failed"
              cat cert_deploy.log || true
              exit 1
            fi
            
            sleep 30
            WAIT_TIME=$((WAIT_TIME + 30))
          done
          
          if [ $WAIT_TIME -ge $MAX_WAIT ]; then
            echo "Timeout waiting for certificate validation"
            cat cert_deploy.log || true
            exit 1
          fi
          
          # Export the ARN
          CERT_ARN=$(aws cloudformation describe-stacks --stack-name SquidCupSite-CertificateStack --query "Stacks[0].Outputs[?OutputKey=='CertificateArn'].OutputValue" --output text)
          echo "Certificate ARN: $CERT_ARN"
          echo "CERT_ARN=$CERT_ARN" >> "$GITHUB_ENV"

      # Clean up the DNS record after certificate is validated
      - name: Clean up Cloudflare DNS Record
        if: env.CLOUDFLARE_RECORD_ID != '' && (success() || failure())
        run: |
          ZONE_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=spkymnr.xyz" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" | \
            jq -r '.result[0].id')
          
          echo "Cleaning up DNS record with ID: $CLOUDFLARE_RECORD_ID"
          curl -s -X DELETE "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records/$CLOUDFLARE_RECORD_ID" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json"
          
          echo "DNS validation record cleaned up"

      # Debug step to verify environment variables
      - name: Debug Environment
        run: |
          echo "Certificate ARN: $CERT_ARN"
          echo "API URL: $API_URL"

      # Cancel any in-progress updates and destroy stack
      #- name: Handle Frontend Stack
      #  run: |
      #    # Try to cancel any in-progress updates
      #    aws cloudformation cancel-update-stack --stack-name SquidCupSite-FrontendStack || true
      #    
      #    # Wait briefly for cancellation
      #    sleep 30
      #    
      #    # Now try to delete the stack
      #    aws cloudformation delete-stack --stack-name SquidCupSite-FrontendStack || true
      #    
      #    # Wait for deletion to complete
      #    aws cloudformation wait stack-delete-complete --stack-name SquidCupSite-FrontendStack || true
          
      # Deploy fresh frontend stack
      - name: Deploy Frontend Stack
        if: env.CERT_ARN != ''
        run: |
          cdk deploy SquidCupSite-FrontendStack \
            --require-approval never

      # Create the permanent CNAME record for squidcup.spkymnr.xyz
      - name: Create Cloudflare CNAME for Website
        run: |
          # Get the CloudFront distribution domain name
          CLOUDFRONT_DOMAIN=$(aws cloudformation describe-stacks --stack-name SquidCupSite-FrontendStack --query "Stacks[0].Outputs[?OutputKey=='DistributionDomainName'].OutputValue" --output text)
          echo "CloudFront Domain: $CLOUDFRONT_DOMAIN"
          
          if [ -z "$CLOUDFRONT_DOMAIN" ]; then
            echo "Failed to get CloudFront domain name"
            exit 1
          fi
          
          # Get the zone ID for spkymnr.xyz
          ZONE_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=spkymnr.xyz" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" | \
            jq -r '.result[0].id')
          
          echo "Zone ID: $ZONE_ID"
          
          if [ "$ZONE_ID" = "null" ] || [ -z "$ZONE_ID" ]; then
            echo "Failed to get Cloudflare zone ID for spkymnr.xyz"
            exit 1
          fi
          
          # Check if the record already exists
          EXISTING_RECORD=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?name=squidcup.spkymnr.xyz&type=CNAME" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json")
          
          RECORD_COUNT=$(echo "$EXISTING_RECORD" | jq -r '.result | length')
          
          if [ "$RECORD_COUNT" -gt 0 ]; then
            # Update existing record
            RECORD_ID=$(echo "$EXISTING_RECORD" | jq -r '.result[0].id')
            echo "Updating existing CNAME record with ID: $RECORD_ID"
            
            RECORD_RESPONSE=$(curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records/$RECORD_ID" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data "{
                \"type\": \"CNAME\",
                \"name\": \"squidcup\",
                \"content\": \"$CLOUDFRONT_DOMAIN\",
                \"ttl\": 300
              }")
          else
            # Create new record
            echo "Creating new CNAME record for squidcup.spkymnr.xyz"
            
            RECORD_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data "{
                \"type\": \"CNAME\",
                \"name\": \"squidcup\",
                \"content\": \"$CLOUDFRONT_DOMAIN\",
                \"ttl\": 300
              }")
          fi
          
          echo "Cloudflare API response: $RECORD_RESPONSE"
          
          # Check if record creation/update was successful
          SUCCESS=$(echo "$RECORD_RESPONSE" | jq -r '.success')
          if [ "$SUCCESS" = "true" ]; then
            echo "CNAME record for squidcup.spkymnr.xyz created/updated successfully"
            echo "Your website should be available at: https://squidcup.spkymnr.xyz"
          else
            echo "Failed to create/update CNAME record"
            echo "$RECORD_RESPONSE" | jq -r '.errors[]'
            exit 1
          fi